в №1 минимальном (1-я часть задания) есть класс Point, с приватным полем color типа short
(short, потому, что такой тип используется в WinApi) и 
конструкторы с методом run. Координаты не хранятся, так как
точка всегда должна бежать с левого верхнего угла консоли.
в методе run с помощью winapi находится размер консоли, точка отрисовы-
вается в цикле, после каждой итерации цикла, экран очищается(system("CLS"))
во второй части 1 минимального задания в класс Point добавлены функции-члены
getX, getY. В классе Rect сначала печатаются углы, затем горизонтальные
стороны и в конце вертикальные.

в №1 среднем есть класс Timer, с двумя полями double: start_time, end_time,
конструктор по умолчанию, который зануляет начало и конец,
метод start, который заносит в start_time текущее время через функцию
Clock, stop, который делает то же самое что и start и printElapsedTime,
который печатает разницу между конечным и начальным временем.

в №1 дополнительном в классе Buffer есть указатель на массив float *data,
 и last_element_pos, в котором хранится позиция в массиве последнего
записанного элемента. Позиция может быть больше размера массива, элементы
в методе append всегда добавляются в позицию массива, равному остатку
от деления last_elem_pos на максимальный размер буфера. (last_elem_pos % max_buff_size)
в методе pop в случае, если буфер пуст, вызывается ошибка, или возвращается
нулевой элемент в буфере и сдвигаются ячейки памяти на шаг назад.

в № 2.1 минимальном функция prompt (в количестве 3-х шт.) печатает
просьбу ввести число того типа, который объявлен в её аргументе.
И вводит значение из потока в переменну, чей указатель передаётся
ей в аргументе.

в № 2.1 основном, в классе String_c объявляется дружественная перегруженная
функция operator<<, нужный для того, чтобы строку можно было
выводить через cout, в private находится указатель на массив
чаров str, есть конструктор копирования, обычный конструктор, который
сохраняет в str копию строки из аргумента, и перегруженные операторы:
=, +, ==, -, /, а также метод at и деструктор. Сами перегруженные операторы
не изменяют объект, они возвращают изменённую копию текущего объекта.
operator== использует стандартную функцию strcmp, operator+ копирует
две строки через strcpy в одну, которую возвращает, operator-
находит позицию суб-строки в строке объекта(str) и копирует в этот
адрес остаток str и возвращает получившуюся строку, operator/
использует вектор удалённых символов для оптимизации и для каждого
нового символа в строке dividor он проходится по строке объекта (str)
и при равенстве символа из dividor и str сдвигает строку идущую
после этого символа на его место через strcpy, тем самым затирает его.
В методе at в цикле находятся все позиции вхождения substr в str до тех
пор пока они не закончятся, либо пока не будет установленно число вхождений,
равное i. После возвращается разница между адресом последнего найденного вхождения и 
адреса начала строки (str).

В задании №2.2 содержится класс String, в котором запрещено копирование
(конструктор копирования добавлен в private), конструктор с деструктором,
перегруженный operator+, который работает так же как и в прошлом задании
и метод print, выводящий строку через cout.