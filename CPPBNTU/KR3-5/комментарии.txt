Название каждой папки в файле contr. rab - номер задания. 

В задании 3 есть классы Point, Line, Triangle. В Point хранятся координаты точки (тип int) и 
определены виртуальные методы для рисования (draw), стирания (erase) точки в окне консоли,
конструктор, конструктор по умолчанию, геттеры координат (getX, getY), виртуальный метод для 
перемещения точки (move), который прибавляет к текущим координатам точки координаты данные в 
аргументах функции (offset_x, offset_y). Также имеется приватный метод rotateAboutPoint, который вращает
текущую точку вокруг другой на угол (в радианах) и перегруженный оператор== для сравнения двух 
точек на равенство.
Метод draw передвигает курсор в нужную точку в окне консоли и печатает '*', erase печатает пробел.
Перемещение курсора задано в функции moveConsoleCursor, описанной в geometrics.cpp. Здесь используется
вызов виндусовской функции. Я не исползьовал gotoxy, т.к. в Visual Studio её нет.
Класс Line содержит координаты конца отрезка (координаты начала - базовые поля x и y, которые
он наследует от Point), приватный метод getCenter, который возвращает центр отрезка через (центр вощвращается
не с помощью return, а с помощью двух указателей типа float, которые передаются в аргументах),
конструктор, в который передаются 2 точки - начало и конец отрезка, базовый конструкторю
Line переопределяет базовые виртуальные методы класса Point: move, draw, erase, а также задаёт
свой виртуальный метод rotate(double angle). В move класс вызвыает базовый метод move класса Point,
т.к. он перемещает точки x,y, которые являются началом отрезка, а также прибавляет offset_x и
offset_y к координатам конца отрезка. В методах draw и erase вызывается приватный метод
getAllPoints, который возвращает все точки. метод getAllPoints создаёт через new массив,
в который заносит все точки, принадлежащие отрезку, а также возвращает размер массива
через указатель, передаваемый в единственном аргументе. Точки находятся с помощью
алгоритма Брезенхема(https://ru.wikipedia.org/wiki/Алгоритм_Брезенхэма).
После того как методы draw или erase получат все точки отрезка, они проходят по массиву
и отрисовывают каждую точку, либо стирают. Метод rotate получает центр отрезка через метод
getCenter, и вызывает базовый метод класса Point - rotateAboutPoint, куда передаёт
свой центр, который вращает базовые координаты x и y. Вторую точку (x2,y2)(конец отрезка) метод представляет
в виде объекта Point и также вызывает метод rotateAboutPoint, после чего копирует сохраняет 
координаты измененной точки в x2 и y2.
Класс Triangle имеет координаты вершины (x3, y3), координаты основания заданы в базовом классе 
Line (x2, y2  и базовые x,y класса Point), а также флаг is_filled (bool), который означает
закрашен ли треугольник или нет. Triangle переопределяет виртуальные методы класса Line
и содержит метод fill, который устанавливает флаг is_filled. При отрисовке или стирании
вызывается приватный метод iterOverSides, чей аргумент (bool draw), указывает какое 
действие необходимо сделать (отрисовать или стереть). Метод создаёт 2 объекта Line - 
2 стороны треугольника, первая сторона хранится в базовом классе Line. Затем треугольник вызвает
базовый метод Line::draw() (или erase), и те же методы у двух созданных сторон треугольника.
Если флаг is_filled треугольника равен true, то происходит заливка треугольника.
При заливке находятся высшая и низшая точки треугольника. Заливка происходит путём отрисовки
всех горизнотальных отрезков, лежаших в треугольинке, от высшей точки до нижней.
Метод получает все точки, принадлежащие контуру треугольинка через метод getAllPoints
и вызываем fillFromPoint, в который передаёт высшую и низшую точки, массив с точками, полученный 
ранее, его размер и символ, которым нужно залить треугольник (* если аргумент нужно закрасить,
пробел, если стереть). Горизонтальные линнии находятся через функцию getLineWithEqualHeight,
которая ищет в массиве точек две одинаковые точки с высотой, указанной в аргументе y и возвращает
указатель на найденную линию или NULL. fillFromPoint вызывает методы draw отрезков, полученных
из getLineWithEqualHeight, до тех пор пока не получит NULL.
При повороте треугольник находит свой центр, вызвыает базовый метод Point::rotateAboutPoint,
и поворачивает 2 оставшиеся вершины, путём приведения их к объектам Point и вызову метода поворота.


В задании 4.1 есть базовый, абстрактный класс area, который хранит в protected ширину и высоту
(w,h) фигуры. У area есть конструктор, базовый конструктор, метод setar, для задания w и h 
и чистая виртуальная функция getar, возвращющая площадь фигуры. От area наследуются reactangle и
triangle, переопределяющие (реализующие) чистый виртуальный метод getar (в rectangle w*h, в 
triangle w*h/2, здесь w - ширина основания треугольинка). При тестировании классов происходит консольный
ввод ширины и высоты прямоугольника и треугольника, и ввывод их площадей на экран


В задании 4.2 имеется абстрактный класс shape, от которого наследуется класс hexagon (правильный
шестиугольник). В shape хранится координата центра фигуры (int x,y), метод setPos для задания
позиции и чистый виртуальный метод draw, в который аргументом передаётся дескриптор окна(в данном случае консоли) 
Windows (HDC dc). В классе hexagon в private находится радиус шестиугольника (int) и его сеттер.
При отрисовке шестиугольника создаётся массив с 6-ю вершинами фигуры, которые передаются 
в виндусовскую функцию Polygon вместе с дескриптором окна для отрисовки фигуры. При тестировании
класса в main.cpp в консоли вводится радиус каждого шестиугольника и их количество,
затем инициализируется массив с указателями типа shape, куда заносятся объекты
класса hexagon и после отрисовываются через вызов абстрактного метода draw класса shape.


В 5 задании есть шаблон класса list и класс bilet для хранения авиабилетов.
в метод класса list - printAllWhere передаётся функция (Predictor pr), которая проверяет
что в билете содержится нужная дата и номер рейса и возвращается true если всё подходит, иначе
false. printAllWhere проходится по всем билетам в списке, передаёт их в функцию pr, и печатает
если последняя вернула true. Класс bilet хранит приватные данные, указанные в задании. В классе
есть конструктор, конструктор по умолчанию, метод print, гетеры номера полёта и даты вылета,а также
перегруженный оператор==, нужный для метода класса list - del. 
В метод del передаётся объект bilet, который нужно удалить. В качестве функции для проверки проверки
билета в методе printAllWhere  используется isSuitableData

